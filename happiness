#!/bin/bash

# TODO: Who owns an IP?
# TODO: Arin?
# TODO: Interpret Traceroute?

COMMANDS="info";

function usage {
	echo "";
	echo "Usage: ./happiness <command> [<args>]";
	echo ""
	echo "	Valid commands:"
	echo ""
	echo "		check_import somefile.xml"
	echo ""
	echo "		url http://someurl.com"
	echo ""
	echo "		whois someurl.com"
	echo ""
	echo "		feed http://feedurl.com"
	echo ""
	echo "		awesome"
	echo ""
	echo "";
}

function get_domain_from_string {
	local __RESULTVAR=$2
	local RESULT=`echo $1 | sed 's/http:\/\///'`
	RESULT=`echo $RESULT | sed 's/\/.*//'`
	eval $__RESULTVAR="'$RESULT'"
}

function add_http_if_needed {
	local __RESULTVAR=$2
	local RESULT=`echo $1 |grep 'http://'`
	if [ -z "$RESULT" ]; then
		eval $__RESULTVAR="'http://$1'"
	else
		eval $__RESULTVAR="'$1'"
	fi
}

function error_on_404 {
	COUNT=`curl --silent -I $1 |grep -c "404 Not Found"`;
	if [ 0 -ne $COUNT ]; then
		echo ""	
		echo "Oops, I got a 404 error for $1"
		echo ""	
		exit;
	fi
}

if [ -z "$1" ]; then
	usage;
fi

if [ "check_import" == "$1" ]; then
	if [ -z "$2" ] || [ ! -e "$2" ]; then
		echo "";
		echo "Usage: ./happiness check_import <file.xml>";
		echo "";
		echo "Please make sure that the file you're specifying as an argument exists in the path specified.";
		echo "";
		exit;
	fi

	POSTS=`cat $2 |grep "post_type>post<" |wc -l`;
	PAGES=`cat $2 |grep "post_type>page<" |wc -l`;
	ATTACHMENTS=`cat $2 |grep "post_type>attachment<" |wc -l`;
	COMMENTS=`cat $2 |grep "<wp:comment>" |wc -l`;
	ALL=`cat $2 |grep "post_type>" |wc -l`;

	echo "==========================";
	echo "";
	echo "Posts:       $POSTS";
	echo "Pages:       $PAGES";
	echo "Attachments: $ATTACHMENTS";
	echo "Total:       $ALL";
	echo "Comments:    $COMMENTS";
	echo "";
	echo "==========================";
	echo "";

	TAIL=`tail -1 $2`;
	if [ "</rss>" != "$TAIL" ]; then
		echo "";
		echo "ERROR: The last line is not </rss>, so this is probably an invalid or incomplete WXR file.";
		echo "";
		exit;
	fi

	echo "Now parsing XML for errors:"
	echo "";
	XML_ERRORS=`xmllint --noout $2 &>/tmp/xmllint_output`;
	HAS_XML_ERRORS=`cat /tmp/xmllint_output |wc -l`

	if [[ 0 -eq $HAS_XML_ERRORS ]]; then
		echo "";
		echo "No errors!";
		echo "";
	else
		echo "XML PARSING ERRORS:";
		echo "";
		cat /tmp/xmllint_output
	fi
	rm /tmp/xmllint_output
	
fi

if [ "feed" == "$1" ]; then
	if [ -z "$2" ]; then
		echo "";
		echo "Usage: ./happiness feed <http://feedurl.com/>";
		echo "";
		echo "Please make sure you've specified a feed url.";
		echo "";
		exit;
	fi

	add_http_if_needed $2 __FEED_URL

	error_on_404 $__FEED_URL;

	TMP_FILE="/tmp/feed-"`echo $__FEED_URL | md5`;

	if [ -e "$TMP_FILE" ]; then
		rm $TMP_FILE;
	fi

	echo "";
	echo "Hang tight, I'm fetching the feed...";
	echo ""

	curl $__FEED_URL --silent -o $TMP_FILE
	if [ ! -e "$TMP_FILE" ]; then
		echo "";
		echo "Oops, it looks like we coudn't fetch that feed.";
		echo "";
	fi

	XML_ERRORS=`xmllint --noout $TMP_FILE`
	if [ -z "$XML_ERRORS" ]; then
		echo "Yay, no errors.";
	else
		echo "Oops, we found errors:";
		echo "";
		echo $XML_ERRORS;
	fi

	echo ""

	rm $TMP_FILE;
fi

if [ "whois" == "$1" ]; then
	if [ -z "$2" ]; then
		echo "";
		echo "Usage: ./happiness whois <domain.com>";
		echo "";
		echo "Please replace <domain.com> with an actual domain.";
		echo "";
		exit;
	fi

	HAS_WHOIS_PY_MOD=`pydoc -w whois`
	# pydoc leaves this little file behind. Tidy up.
	if [ -e whois.html ]; then
		rm whois.html
	fi

	if [ -z "$HAS_WHOIS_PY_MOD" ]; then
		echo "";
		echo "I need to install a python library so that I can parse whois results for you.";
		echo "";
		echo "It should be pretty harmless.";
		echo "";
		echo "If you're ok with it, then provide your password when prompted below to give this script privileges to install the library. If you're not, just ctrl-c to quit.";
		echo "";

		sudo easy_install python-whois
	fi

	# Check for the whois library again.
	HAS_WHOIS_PY_MOD=`pydoc -w whois`
	# pydoc leaves this little file behind. Tidy up.
	if [ -e whois.html ]; then
		rm whois.html
	fi
	
	if [ -z "$HAS_WHOIS_PY_MOD" ]; then
		echo "";
		echo "I tried to install the whois module for python, but it didn't work. I give up. Sorry. :(";
		echo "";
	fi

	get_domain_from_string $2 __WHOIS_DOMAIN

	WHOIS_SCRIPT="/tmp/whois_"`echo $__WHOIS_DOMAIN | md5`".py"
	echo "#!/usr/bin/python" > $WHOIS_SCRIPT
	echo "" >> $WHOIS_SCRIPT
	echo "import whois" >> $WHOIS_SCRIPT
	echo "" >> $WHOIS_SCRIPT
	echo "domain = whois.query( '$__WHOIS_DOMAIN' )" >> $WHOIS_SCRIPT
	echo "if domain is None:" >> $WHOIS_SCRIPT
	echo "	print( 'Error querying domain.' )" >> $WHOIS_SCRIPT
	echo "	exit()" >> $WHOIS_SCRIPT
	echo "print( 'Registrar:     %s' % domain.registrar )" >> $WHOIS_SCRIPT
	echo "print( 'Creation Date: %s' % domain.creation_date )" >> $WHOIS_SCRIPT
	echo "print( 'Expiration:    %s' % domain.expiration_date )" >> $WHOIS_SCRIPT
	echo "print( 'Last Updated:  %s' % domain.last_updated )" >> $WHOIS_SCRIPT
	echo "print( 'Name Servers:' )" >> $WHOIS_SCRIPT
	echo "for ns in domain.name_servers:" >> $WHOIS_SCRIPT
	echo "	print( '        %s' % ns )" >> $WHOIS_SCRIPT
	echo "" >> $WHOIS_SCRIPT

	echo "";
	echo "Running a whois query...";
	echo "";
	python $WHOIS_SCRIPT
	echo "";
	rm $WHOIS_SCRIPT
fi

if [ "url" == "$1" ]; then
	if [ -z "$2" ]; then
		echo "";
		echo "Usage: ./happiness url <http://url.com/>";
		echo "";
		echo "Please replace <http://url.com/> with an actual url.";
		echo "";
		exit;
	fi

	add_http_if_needed $2 __URL

	error_on_404 $__URL

	echo "";
	echo "HTTP Headers: ";
	echo "";
	curl -I $__URL --silent;
	echo "";

	echo "Now checking for more detailed info.";
	echo "";
	URL_CONTENT="/tmp/url_"`echo $__URL |md5`".html"
	if [ -e "$URL_CONTENT" ]; then
		rm $URL_CONTENT
	fi

	curl $__URL --silent > $URL_CONTENT
	echo "WordPress Version: " `cat $URL_CONTENT | grep '<meta name="generator" content=' |sed 's/.*content=\"\(.*\)\".*/\1/'`
	echo "       Site Title: " `cat $URL_CONTENT | grep '<title>' |sed 's/<title>\(.*\)<\/title>/\1/'`
	echo "            Theme: " `cat $URL_CONTENT | grep '/style.css' |grep -m 1 'wp-content/themes' |sed 's/.*themes\/\(.*\)\/style\.css.*/\1/'`
	echo ""


	rm $URL_CONTENT
	
fi

if [ "awesome" == "$1" ]; then
	say `echo "ZGFyeWwgaXMgYXdlc29tZQo=" |base64 --decode`
fi
